chart:
  files:
  - data: IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqLm9yaWcKKn4KIyBWYXJpb3VzIElERXMKLnByb2plY3QKLmlkZWEvCioudG1wcm9qCi52c2NvZGUvCg==
    name: .helmignore
  - data: 
    name: README.md
  - data: 
    name: README.md.gotmpl
  lock: null
  metadata:
    apiVersion: v2
    appVersion: 1.18.1
    description: Scales Kubernetes worker nodes within autoscaling groups.
    home: https://github.com/kubernetes/autoscaler
    icon: https://github.com/kubernetes/kubernetes/blob/master/logo/logo.png
    maintainers:
    - email: e.bailey@sportradar.com
      name: yurrriq
    - email: mgoodness@gmail.com
      name: mgoodness
    - email: guyjtempleton@googlemail.com
      name: gjtempleton
    - email: scott.crooks@gmail.com
      name: sc250024
    name: cluster-autoscaler
    sources:
    - https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler
    type: application
    version: 9.3.0
  schema: null
  templates:
  - data: e3stIGlmIG9yIC5WYWx1ZXMuYXV0b0Rpc2NvdmVyeS5jbHVzdGVyTmFtZSAuVmFsdWVzLmF1dG9zY2FsaW5nR3JvdXBzIC19fQoKVG8gdmVyaWZ5IHRoYXQgY2x1c3Rlci1hdXRvc2NhbGVyIGhhcyBzdGFydGVkLCBydW46CgogIGt1YmVjdGwgLS1uYW1lc3BhY2U9e3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IGdldCBwb2RzIC1sICJhcHAua3ViZXJuZXRlcy5pby9uYW1lPXt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIubmFtZSIgLiB9fSxhcHAua3ViZXJuZXRlcy5pby9pbnN0YW5jZT17eyAuUmVsZWFzZS5OYW1lIH19IgoKe3stIGVsc2UgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyAgIEVSUk9SOiBZb3UgbXVzdCBzcGVjaWZ5IHZhbHVlcyBmb3IgZWl0aGVyICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjCiMjIyMgICBhdXRvRGlzY292ZXJ5LmNsdXN0ZXJOYW1lIG9yIGF1dG9zY2FsaW5nR3JvdXBzW10gICAgICAgICAgICAgICAgICAgIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKClRoZSBkZXBsb3ltZW50IGFuZCBwb2Qgd2lsbCBub3QgYmUgY3JlYXRlZCBhbmQgdGhlIGluc3RhbGxhdGlvbiBpcyBub3QgZnVuY3Rpb25hbApTZWUgUkVBRE1FOgogIG9wZW4gaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMvY2hhcnRzL3RyZWUvbWFzdGVyL3N0YWJsZS9jbHVzdGVyLWF1dG9zY2FsZXIKCnt7LSBlbmQgLX19Cg==
    name: templates/NOTES.txt
  - data: e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiY2x1c3Rlci1hdXRvc2NhbGVyLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAocHJpbnRmICIlcy0lcyIgLlZhbHVlcy5jbG91ZFByb3ZpZGVyIC5DaGFydC5OYW1lKSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IChwcmludGYgIiVzLSVzIiAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgLkNoYXJ0Lk5hbWUpIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgbmUgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMiICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNoYXJ0IiAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5DaGFydC5OYW1lIC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKUmV0dXJuIGluc3RhbmNlIGFuZCBuYW1lIGxhYmVscy4KKi99fQp7ey0gZGVmaW5lICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLX19CmFwcC5rdWJlcm5ldGVzLmlvL2luc3RhbmNlOiB7eyAuUmVsZWFzZS5OYW1lIHwgcXVvdGUgfX0KYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLm5hbWUiIC4gfCBxdW90ZSB9fQp7ey0gZW5kIC19fQoKCnt7LyoKUmV0dXJuIGxhYmVscywgaW5jbHVkaW5nIGluc3RhbmNlIGFuZCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC19fQp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLiB9fQphcHAua3ViZXJuZXRlcy5pby9tYW5hZ2VkLWJ5OiB7eyAuUmVsZWFzZS5TZXJ2aWNlIHwgcXVvdGUgfX0KaGVsbS5zaC9jaGFydDoge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNoYXJ0IiAuIHwgcXVvdGUgfX0Ke3stIGlmIC5WYWx1ZXMuYWRkaXRpb25hbExhYmVscyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5hZGRpdGlvbmFsTGFiZWxzIH19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgYXBwcm9wcmlhdGUgYXBpVmVyc2lvbiBmb3IgZGVwbG95bWVudC4KKi99fQp7ey0gZGVmaW5lICJkZXBsb3ltZW50LmFwaVZlcnNpb24iIC19fQp7ey0gJGt1YmVUYXJnZXRWZXJzaW9uIDo9IGRlZmF1bHQgLkNhcGFiaWxpdGllcy5LdWJlVmVyc2lvbi5HaXRWZXJzaW9uIC5WYWx1ZXMua3ViZVRhcmdldFZlcnNpb25PdmVycmlkZSB9fQp7ey0gaWYgc2VtdmVyQ29tcGFyZSAiPDEuOS0wIiAka3ViZVRhcmdldFZlcnNpb24gLX19Cnt7LSBwcmludCAiYXBwcy92MWJldGEyIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludCAiYXBwcy92MSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgYXBwcm9wcmlhdGUgYXBpVmVyc2lvbiBmb3IgcG9kc2VjdXJpdHlwb2xpY3kuCiovfX0Ke3stIGRlZmluZSAicG9kc2VjdXJpdHlwb2xpY3kuYXBpVmVyc2lvbiIgLX19Cnt7LSAka3ViZVRhcmdldFZlcnNpb24gOj0gZGVmYXVsdCAuQ2FwYWJpbGl0aWVzLkt1YmVWZXJzaW9uLkdpdFZlcnNpb24gLlZhbHVlcy5rdWJlVGFyZ2V0VmVyc2lvbk92ZXJyaWRlIH19Cnt7LSBpZiBzZW12ZXJDb21wYXJlICI8MS4xMC0wIiAka3ViZVRhcmdldFZlcnNpb24gLX19Cnt7LSBwcmludCAiZXh0ZW5zaW9ucy92MWJldGExIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludCAicG9saWN5L3YxYmV0YTEiIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdGhlIHNlcnZpY2UgYWNjb3VudCBuYW1lIHVzZWQgYnkgdGhlIHBvZC4KKi99fQp7ey0gZGVmaW5lICJjbHVzdGVyLWF1dG9zY2FsZXIuc2VydmljZUFjY291bnROYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMucmJhYy5zZXJ2aWNlQWNjb3VudC5jcmVhdGUgLX19CiAgICB7eyBkZWZhdWx0IChpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4pIC5WYWx1ZXMucmJhYy5zZXJ2aWNlQWNjb3VudC5uYW1lIH19Cnt7LSBlbHNlIC19fQogICAge3sgZGVmYXVsdCAiZGVmYXVsdCIgLlZhbHVlcy5yYmFjLnNlcnZpY2VBY2NvdW50Lm5hbWUgfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K
    name: templates/_helpers.tpl
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CnJ1bGVzOgogIC0gYXBpR3JvdXBzOgogICAgICAtICIiCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZXZlbnRzCiAgICAgIC0gZW5kcG9pbnRzCiAgICB2ZXJiczoKICAgICAgLSBjcmVhdGUKICAgICAgLSBwYXRjaAogIC0gYXBpR3JvdXBzOgogICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgLSBwb2RzL2V2aWN0aW9uCiAgICB2ZXJiczoKICAgIC0gY3JlYXRlCiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBwb2RzL3N0YXR1cwogICAgdmVyYnM6CiAgICAgIC0gdXBkYXRlCiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBlbmRwb2ludHMKICAgIHJlc291cmNlTmFtZXM6CiAgICAgIC0gY2x1c3Rlci1hdXRvc2NhbGVyCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAgICAgLSB1cGRhdGUKICAtIGFwaUdyb3VwczoKICAgICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgICAtIG5vZGVzCiAgICB2ZXJiczoKICAgIC0gd2F0Y2gKICAgIC0gbGlzdAogICAgLSBnZXQKICAgIC0gdXBkYXRlCiAgLSBhcGlHcm91cHM6CiAgICAtICIiCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcG9kcwogICAgICAtIHNlcnZpY2VzCiAgICAgIC0gcmVwbGljYXRpb25jb250cm9sbGVycwogICAgICAtIHBlcnNpc3RlbnR2b2x1bWVjbGFpbXMKICAgICAgLSBwZXJzaXN0ZW50dm9sdW1lcwogICAgdmVyYnM6CiAgICAgIC0gd2F0Y2gKICAgICAgLSBsaXN0CiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6CiAgICAtIGJhdGNoCiAgICByZXNvdXJjZXM6CiAgICAgIC0gam9icwogICAgICAtIGNyb25qb2JzCiAgICB2ZXJiczoKICAgICAgLSB3YXRjaAogICAgICAtIGxpc3QKICAgICAgLSBnZXQKICAtIGFwaUdyb3VwczoKICAgIC0gYmF0Y2gKICAgIC0gZXh0ZW5zaW9ucwogICAgcmVzb3VyY2VzOgogICAgLSBqb2JzCiAgICB2ZXJiczoKICAgIC0gZ2V0CiAgICAtIGxpc3QKICAgIC0gcGF0Y2gKICAgIC0gd2F0Y2gKICAtIGFwaUdyb3VwczoKICAgICAgLSBleHRlbnNpb25zCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcmVwbGljYXNldHMKICAgICAgLSBkYWVtb25zZXRzCiAgICB2ZXJiczoKICAgICAgLSB3YXRjaAogICAgICAtIGxpc3QKICAgICAgLSBnZXQKICAtIGFwaUdyb3VwczoKICAgICAgLSBwb2xpY3kKICAgIHJlc291cmNlczoKICAgICAgLSBwb2RkaXNydXB0aW9uYnVkZ2V0cwogICAgdmVyYnM6CiAgICAgIC0gd2F0Y2gKICAgICAgLSBsaXN0CiAgLSBhcGlHcm91cHM6CiAgICAtIGFwcHMKICAgIHJlc291cmNlczoKICAgIC0gZGFlbW9uc2V0cwogICAgLSByZXBsaWNhc2V0cwogICAgLSBzdGF0ZWZ1bHNldHMKICAgIHZlcmJzOgogICAgLSB3YXRjaAogICAgLSBsaXN0CiAgICAtIGdldAogIC0gYXBpR3JvdXBzOgogICAgLSBzdG9yYWdlLms4cy5pbwogICAgcmVzb3VyY2VzOgogICAgLSBzdG9yYWdlY2xhc3NlcwogICAgLSBjc2lub2RlcwogICAgdmVyYnM6CiAgICAtIHdhdGNoCiAgICAtIGxpc3QKICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBjb25maWdtYXBzCiAgICB2ZXJiczoKICAgICAgLSBsaXN0CiAgICAgIC0gd2F0Y2gKICAtIGFwaUdyb3VwczoKICAgIC0gY29vcmRpbmF0aW9uLms4cy5pbwogICAgcmVzb3VyY2VzOgogICAgLSBsZWFzZXMKICAgIHZlcmJzOgogICAgLSBjcmVhdGUKICAtIGFwaUdyb3VwczoKICAgIC0gY29vcmRpbmF0aW9uLms4cy5pbwogICAgcmVzb3VyY2VOYW1lczoKICAgIC0gY2x1c3Rlci1hdXRvc2NhbGVyCiAgICByZXNvdXJjZXM6CiAgICAtIGxlYXNlcwogICAgdmVyYnM6CiAgICAtIGdldAogICAgLSB1cGRhdGUKe3stIGlmIC5WYWx1ZXMucmJhYy5wc3BFbmFibGVkIH19CiAgLSBhcGlHcm91cHM6CiAgICAtIGV4dGVuc2lvbnMKICAgIC0gcG9saWN5CiAgICByZXNvdXJjZXM6CiAgICAtIHBvZHNlY3VyaXR5cG9saWNpZXMKICAgIHJlc291cmNlTmFtZXM6CiAgICAtIHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICAgIHZlcmJzOgogICAgLSB1c2UKe3stIGVuZCAtfX0KCnt7LSBlbmQgLX19Cg==
    name: templates/clusterrole.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIGxhYmVsczoKe3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmxhYmVscyIgLiB8IGluZGVudCA0IH19CiAgbmFtZToge3sgdGVtcGxhdGUgImNsdXN0ZXItYXV0b3NjYWxlci5mdWxsbmFtZSIgLiB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuc2VydmljZUFjY291bnROYW1lIiAuIH19CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQp7ey0gZW5kIC19fQo=
    name: templates/clusterrolebinding.yaml
  - data: 
    name: templates/deployment.yaml
  - data: e3stIGlmIC5WYWx1ZXMucG9kRGlzcnVwdGlvbkJ1ZGdldCAtfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLiB8IGluZGVudCA2IH19Cnt7LSBpZiAuVmFsdWVzLnBvZERpc3J1cHRpb25CdWRnZXQgfX0KICB7eyB0b1lhbWwgLlZhbHVlcy5wb2REaXNydXB0aW9uQnVkZ2V0IHwgbmluZGVudCAyIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCAtfX0K
    name: templates/pdb.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5wc3BFbmFibGVkIH19CmFwaVZlcnNpb246IHt7IHRlbXBsYXRlICJwb2RzZWN1cml0eXBvbGljeS5hcGlWZXJzaW9uIiAuIH19CmtpbmQ6IFBvZFNlY3VyaXR5UG9saWN5Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQpzcGVjOgogICMgUHJldmVudHMgcnVubmluZyBpbiBwcml2aWxlZ2VkIG1vZGUKICBwcml2aWxlZ2VkOiBmYWxzZQogICMgUmVxdWlyZWQgdG8gcHJldmVudCBlc2NhbGF0aW9ucyB0byByb290LgogIGFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbjogZmFsc2UKICByZXF1aXJlZERyb3BDYXBhYmlsaXRpZXM6CiAgICAtIEFMTAogIHZvbHVtZXM6CiAgICAtICdjb25maWdNYXAnCiAgICAtICdzZWNyZXQnCiAgICAtICdob3N0UGF0aCcKICAgIC0gJ2VtcHR5RGlyJwogICAgLSAncHJvamVjdGVkJwogICAgLSAnZG93bndhcmRBUEknCnt7LSBpZiBlcSAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgImdjZSIgfX0KICBhbGxvd2VkSG9zdFBhdGhzOgogICAgLSBwYXRoUHJlZml4OiB7eyAuVmFsdWVzLmNsb3VkQ29uZmlnUGF0aCB9fQp7ey0gZW5kIH19CiAgaG9zdE5ldHdvcms6IGZhbHNlCiAgaG9zdElQQzogZmFsc2UKICBob3N0UElEOiBmYWxzZQogIHJ1bkFzVXNlcjoKICAgIHJ1bGU6IFJ1bkFzQW55CiAgc2VMaW51eDoKICAgIHJ1bGU6IFJ1bkFzQW55CiAgc3VwcGxlbWVudGFsR3JvdXBzOgogICAgcnVsZTogJ011c3RSdW5BcycKICAgIHJhbmdlczoKICAgICAgIyBGb3JiaWQgYWRkaW5nIHRoZSByb290IGdyb3VwLgogICAgICAtIG1pbjogMQogICAgICAgIG1heDogNjU1MzUKICBmc0dyb3VwOgogICAgcnVsZTogJ011c3RSdW5BcycKICAgIHJhbmdlczoKICAgICAgIyBGb3JiaWQgYWRkaW5nIHRoZSByb290IGdyb3VwLgogICAgICAtIG1pbjogMQogICAgICAgIG1heDogNjU1MzUKICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiBmYWxzZQp7ey0gZW5kIH19Cg==
    name: templates/podsecuritypolicy.yaml
  - data: e3stIGlmIGhhc0tleSAuVmFsdWVzLmV4dHJhQXJncyAiZXhwYW5kZXIiIH19Cnt7LSBpZiBhbmQgKC5WYWx1ZXMuZXhwYW5kZXJQcmlvcml0aWVzKSAoZXEgLlZhbHVlcy5leHRyYUFyZ3MuZXhwYW5kZXIgInByaW9yaXR5IikgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiBjbHVzdGVyLWF1dG9zY2FsZXItcHJpb3JpdHktZXhwYW5kZXIKICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQpkYXRhOgogIHByaW9yaXRpZXM6IHwtCnt7IC5WYWx1ZXMuZXhwYW5kZXJQcmlvcml0aWVzIHwgaW5kZW50IDQgfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K
    name: templates/priority-expander-configmap.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZQptZXRhZGF0YToKICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KcnVsZXM6CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBjb25maWdtYXBzCiAgICB2ZXJiczoKICAgICAgLSBjcmVhdGUKICAtIGFwaUdyb3VwczoKICAgICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgICAtIGNvbmZpZ21hcHMKICAgIHJlc291cmNlTmFtZXM6CiAgICAgIC0gY2x1c3Rlci1hdXRvc2NhbGVyLXN0YXR1cwogICAgdmVyYnM6CiAgICAgIC0gZGVsZXRlCiAgICAgIC0gZ2V0CiAgICAgIC0gdXBkYXRlCnt7LSBlbmQgLX19Cg==
    name: templates/role.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZToge3sgdGVtcGxhdGUgImNsdXN0ZXItYXV0b3NjYWxlci5mdWxsbmFtZSIgLiB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLnNlcnZpY2VBY2NvdW50TmFtZSIgLiB9fQogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Ke3stIGVuZCAtfX0K
    name: templates/rolebinding.yaml
  - data: e3stIGlmIG9yIChlcSAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgImF6dXJlIikgKGFuZCAoZXEgLlZhbHVlcy5jbG91ZFByb3ZpZGVyICJhd3MiKSAobm90IChoYXMgIiIgKGxpc3QgLlZhbHVlcy5hd3NBY2Nlc3NLZXlJRCAuVmFsdWVzLmF3c1NlY3JldEFjY2Vzc0tleSkpKSkgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KZGF0YToKe3stIGlmIGVxIC5WYWx1ZXMuY2xvdWRQcm92aWRlciAiYXp1cmUiIH19CiAgQ2xpZW50SUQ6ICJ7eyAuVmFsdWVzLmF6dXJlQ2xpZW50SUQgfCBiNjRlbmMgfX0iCiAgQ2xpZW50U2VjcmV0OiAie3sgLlZhbHVlcy5henVyZUNsaWVudFNlY3JldCB8IGI2NGVuYyB9fSIKICBSZXNvdXJjZUdyb3VwOiAie3sgLlZhbHVlcy5henVyZVJlc291cmNlR3JvdXAgfCBiNjRlbmMgfX0iCiAgU3Vic2NyaXB0aW9uSUQ6ICJ7eyAuVmFsdWVzLmF6dXJlU3Vic2NyaXB0aW9uSUQgfCBiNjRlbmMgfX0iCiAgVGVuYW50SUQ6ICJ7eyAuVmFsdWVzLmF6dXJlVGVuYW50SUQgfCBiNjRlbmMgfX0iCiAgVk1UeXBlOiAie3sgLlZhbHVlcy5henVyZVZNVHlwZSB8IGI2NGVuYyB9fSIKICBDbHVzdGVyTmFtZTogInt7IC5WYWx1ZXMuYXp1cmVDbHVzdGVyTmFtZSB8IGI2NGVuYyB9fSIKICBOb2RlUmVzb3VyY2VHcm91cDogInt7IC5WYWx1ZXMuYXp1cmVOb2RlUmVzb3VyY2VHcm91cCB8IGI2NGVuYyB9fSIKe3stIGVsc2UgaWYgZXEgLlZhbHVlcy5jbG91ZFByb3ZpZGVyICJhd3MiIH19CiAgQXdzQWNjZXNzS2V5SWQ6ICJ7eyAuVmFsdWVzLmF3c0FjY2Vzc0tleUlEIHwgYjY0ZW5jIH19IgogIEF3c1NlY3JldEFjY2Vzc0tleTogInt7IC5WYWx1ZXMuYXdzU2VjcmV0QWNjZXNzS2V5IHwgYjY0ZW5jIH19Igp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K
    name: templates/secret.yaml
  - data: YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKe3stIGlmIC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5zZXJ2aWNlLmFubm90YXRpb25zIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIGxhYmVsczoKe3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmxhYmVscyIgLiB8IGluZGVudCA0IH19Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2UubGFiZWxzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnNlcnZpY2UubGFiZWxzIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0Kc3BlYzoKe3stIGlmIC5WYWx1ZXMuc2VydmljZS5jbHVzdGVySVAgfX0KICBjbHVzdGVySVA6ICJ7eyAuVmFsdWVzLnNlcnZpY2UuY2x1c3RlcklQIH19Igp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxJUHMgfX0KICBleHRlcm5hbElQczoKe3sgdG9ZYW1sIC5WYWx1ZXMuc2VydmljZS5leHRlcm5hbElQcyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuc2VydmljZS5sb2FkQmFsYW5jZXJJUCB9fQogIGxvYWRCYWxhbmNlcklQOiAie3sgLlZhbHVlcy5zZXJ2aWNlLmxvYWRCYWxhbmNlcklQIH19Igp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIH19CiAgbG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzOgp7eyB0b1lhbWwgLlZhbHVlcy5zZXJ2aWNlLmxvYWRCYWxhbmNlclNvdXJjZVJhbmdlcyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0KICBwb3J0czoKICAgIC0gcG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLnNlcnZpY2VQb3J0IH19CiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgdGFyZ2V0UG9ydDogODA4NQogICAgICBuYW1lOiB7eyAuVmFsdWVzLnNlcnZpY2UucG9ydE5hbWUgfX0KICBzZWxlY3RvcjoKe3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmluc3RhbmNlLW5hbWUiIC4gfCBpbmRlbnQgNCB9fQogIHR5cGU6ICJ7eyAuVmFsdWVzLnNlcnZpY2UudHlwZSB9fSIK
    name: templates/service.yaml
  - data: e3stIGlmIGFuZCAuVmFsdWVzLnJiYWMuY3JlYXRlIC5WYWx1ZXMucmJhYy5zZXJ2aWNlQWNjb3VudC5jcmVhdGUgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLnNlcnZpY2VBY2NvdW50TmFtZSIgLiB9fQp7ey0gaWYgLlZhbHVlcy5yYmFjLnNlcnZpY2VBY2NvdW50LmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6IHt7IHRvWWFtbCAuVmFsdWVzLnJiYWMuc2VydmljZUFjY291bnQuYW5ub3RhdGlvbnMgfCBuaW5kZW50IDQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg==
    name: templates/serviceaccount.yaml
  - data: e3sgaWYgLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5lbmFibGVkIH19CmFwaVZlcnNpb246IG1vbml0b3JpbmcuY29yZW9zLmNvbS92MQpraW5kOiBTZXJ2aWNlTW9uaXRvcgptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICB7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5uYW1lc3BhY2UgfX0KICBuYW1lc3BhY2U6IHt7IC5WYWx1ZXMuc2VydmljZU1vbml0b3IubmFtZXNwYWNlIH19CiAge3stIGVuZCB9fQogIGxhYmVsczoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5zZWxlY3RvciB9fQogICAgICB7eyAka2V5IH19OiB7eyAkdmFsdWUgfCBxdW90ZSB9fQogICAge3stIGVuZCB9fQpzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5pbnN0YW5jZS1uYW1lIiAuIHwgaW5kZW50IDYgfX0KICBlbmRwb2ludHM6CiAgLSBwb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2UucG9ydE5hbWUgfX0KICAgIGludGVydmFsOiB7eyAuVmFsdWVzLnNlcnZpY2VNb25pdG9yLmludGVydmFsIH19CiAgICBwYXRoOiB7eyAuVmFsdWVzLnNlcnZpY2VNb25pdG9yLnBhdGggfX0KICBuYW1lc3BhY2VTZWxlY3RvcjoKICAgIG1hdGNoTmFtZXM6CiAgICAgIC0ge3suUmVsZWFzZS5OYW1lc3BhY2V9fQp7eyBlbmQgfX0K
    name: templates/servicemonitor.yaml
  values:
    additionalLabels: {}
    affinity: {}
    autoDiscovery:
      clusterName: null
      roles:
      - worker
      tags:
      - k8s.io/cluster-autoscaler/enabled
      - k8s.io/cluster-autoscaler/{{ .Values.autoDiscovery.clusterName }}
    autoscalingGroups: []
    autoscalingGroupsnamePrefix: []
    awsAccessKeyID: ""
    awsRegion: us-east-1
    awsSecretAccessKey: ""
    azureClientID: ""
    azureClientSecret: ""
    azureClusterName: ""
    azureNodeResourceGroup: ""
    azureResourceGroup: ""
    azureSubscriptionID: ""
    azureTenantID: ""
    azureUseManagedIdentityExtension: false
    azureVMType: AKS
    cloudConfigPath: /etc/gce.conf
    cloudProvider: aws
    containerSecurityContext: {}
    dnsPolicy: ClusterFirst
    envFromConfigMap: ""
    envFromSecret: ""
    expanderPriorities: {}
    extraArgs:
      logtostderr: true
      stderrthreshold: info
      v: 4
    extraEnv: {}
    extraEnvConfigMaps: {}
    extraEnvSecrets: {}
    extraVolumeSecrets: {}
    fullnameOverride: ""
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      repository: us.gcr.io/k8s-artifacts-prod/autoscaling/cluster-autoscaler
      tag: v1.18.1
    kubeTargetVersionOverride: ""
    magnumCABundlePath: /etc/kubernetes/ca-bundle.crt
    magnumClusterName: ""
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget:
      maxUnavailable: 1
    podLabels: {}
    priorityClassName: ""
    rbac:
      create: true
      pspEnabled: false
      serviceAccount:
        annotations: {}
        create: true
        name: ""
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      annotations: {}
      externalIPs: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      portName: http
      servicePort: 8085
      type: ClusterIP
    serviceMonitor:
      enabled: false
      interval: 10s
      namespace: monitoring
      path: /metrics
      selector:
        release: prometheus-operator
    tolerations: []
    updateStrategy: {}
config:
  autoDiscovery:
    clusterName: eks-apne1-prod-terraform-eks-demo-infra
    enabled: true
  awsRegion: ap-northeast-1
  rbac:
    create: true
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::266981300450:role/EKSClusterAutoscaler
info:
  deleted: ""
  description: Dry run complete
  first_deployed: "2021-03-22T05:01:22.457966+07:00"
  last_deployed: "2021-03-22T05:01:22.457966+07:00"
  notes: |-
    To verify that cluster-autoscaler has started, run:

      kubectl --namespace=kube-system get pods -l "app.kubernetes.io/name=aws-cluster-autoscaler,app.kubernetes.io/instance=cluster-autoscaler"
  status: pending-install
manifest: "---\n# Source: cluster-autoscaler/templates/pdb.yaml\napiVersion: policy/v1beta1\nkind:
  PodDisruptionBudget\nmetadata:\n  labels:\n    app.kubernetes.io/instance: \"cluster-autoscaler\"\n
  \   app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n    app.kubernetes.io/managed-by:
  \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n  name: cluster-autoscaler-aws-cluster-autoscaler\nspec:\n
  \ selector:\n    matchLabels:\n      app.kubernetes.io/instance: \"cluster-autoscaler\"\n
  \     app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n  \n  maxUnavailable:
  1\n---\n# Source: cluster-autoscaler/templates/serviceaccount.yaml\napiVersion:
  v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n    app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   app.kubernetes.io/managed-by: \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n
  \ name: cluster-autoscaler-aws-cluster-autoscaler\n  annotations: \n    eks.amazonaws.com/role-arn:
  arn:aws:iam::266981300450:role/EKSClusterAutoscaler\n---\n# Source: cluster-autoscaler/templates/clusterrole.yaml\napiVersion:
  rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n    app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   app.kubernetes.io/managed-by: \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n
  \ name: cluster-autoscaler-aws-cluster-autoscaler\nrules:\n  - apiGroups:\n      -
  \"\"\n    resources:\n      - events\n      - endpoints\n    verbs:\n      - create\n
  \     - patch\n  - apiGroups:\n    - \"\"\n    resources:\n    - pods/eviction\n
  \   verbs:\n    - create\n  - apiGroups:\n      - \"\"\n    resources:\n      -
  pods/status\n    verbs:\n      - update\n  - apiGroups:\n      - \"\"\n    resources:\n
  \     - endpoints\n    resourceNames:\n      - cluster-autoscaler\n    verbs:\n
  \     - get\n      - update\n  - apiGroups:\n      - \"\"\n    resources:\n      -
  nodes\n    verbs:\n    - watch\n    - list\n    - get\n    - update\n  - apiGroups:\n
  \   - \"\"\n    resources:\n      - pods\n      - services\n      - replicationcontrollers\n
  \     - persistentvolumeclaims\n      - persistentvolumes\n    verbs:\n      - watch\n
  \     - list\n      - get\n  - apiGroups:\n    - batch\n    resources:\n      -
  jobs\n      - cronjobs\n    verbs:\n      - watch\n      - list\n      - get\n  -
  apiGroups:\n    - batch\n    - extensions\n    resources:\n    - jobs\n    verbs:\n
  \   - get\n    - list\n    - patch\n    - watch\n  - apiGroups:\n      - extensions\n
  \   resources:\n      - replicasets\n      - daemonsets\n    verbs:\n      - watch\n
  \     - list\n      - get\n  - apiGroups:\n      - policy\n    resources:\n      -
  poddisruptionbudgets\n    verbs:\n      - watch\n      - list\n  - apiGroups:\n
  \   - apps\n    resources:\n    - daemonsets\n    - replicasets\n    - statefulsets\n
  \   verbs:\n    - watch\n    - list\n    - get\n  - apiGroups:\n    - storage.k8s.io\n
  \   resources:\n    - storageclasses\n    - csinodes\n    verbs:\n    - watch\n
  \   - list\n    - get\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n
  \   verbs:\n      - list\n      - watch\n  - apiGroups:\n    - coordination.k8s.io\n
  \   resources:\n    - leases\n    verbs:\n    - create\n  - apiGroups:\n    - coordination.k8s.io\n
  \   resourceNames:\n    - cluster-autoscaler\n    resources:\n    - leases\n    verbs:\n
  \   - get\n    - update\n---\n# Source: cluster-autoscaler/templates/clusterrolebinding.yaml\napiVersion:
  rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n    app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   app.kubernetes.io/managed-by: \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n
  \ name: cluster-autoscaler-aws-cluster-autoscaler\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
  \ kind: ClusterRole\n  name: cluster-autoscaler-aws-cluster-autoscaler\nsubjects:\n
  \ - kind: ServiceAccount\n    name: cluster-autoscaler-aws-cluster-autoscaler\n
  \   namespace: kube-system\n---\n# Source: cluster-autoscaler/templates/role.yaml\napiVersion:
  rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n    app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   app.kubernetes.io/managed-by: \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n
  \ name: cluster-autoscaler-aws-cluster-autoscaler\nrules:\n  - apiGroups:\n      -
  \"\"\n    resources:\n      - configmaps\n    verbs:\n      - create\n  - apiGroups:\n
  \     - \"\"\n    resources:\n      - configmaps\n    resourceNames:\n      - cluster-autoscaler-status\n
  \   verbs:\n      - delete\n      - get\n      - update\n---\n# Source: cluster-autoscaler/templates/rolebinding.yaml\napiVersion:
  rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n    app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   app.kubernetes.io/managed-by: \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n
  \ name: cluster-autoscaler-aws-cluster-autoscaler\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
  \ kind: Role\n  name: cluster-autoscaler-aws-cluster-autoscaler\nsubjects:\n  -
  kind: ServiceAccount\n    name: cluster-autoscaler-aws-cluster-autoscaler\n    namespace:
  kube-system\n---\n# Source: cluster-autoscaler/templates/service.yaml\napiVersion:
  v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: \"cluster-autoscaler\"\n
  \   app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n    app.kubernetes.io/managed-by:
  \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n  name: cluster-autoscaler-aws-cluster-autoscaler\nspec:\n
  \ ports:\n    - port: 8085\n      protocol: TCP\n      targetPort: 8085\n      name:
  http\n  selector:\n    app.kubernetes.io/instance: \"cluster-autoscaler\"\n    app.kubernetes.io/name:
  \"aws-cluster-autoscaler\"\n  type: \"ClusterIP\"\n---\n# Source: cluster-autoscaler/templates/deployment.yaml\napiVersion:
  apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n    app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   app.kubernetes.io/managed-by: \"Helm\"\n    helm.sh/chart: \"cluster-autoscaler-9.3.0\"\n
  \ name: cluster-autoscaler-aws-cluster-autoscaler\nspec:\n  replicas: 1\n  selector:\n
  \   matchLabels:\n      app.kubernetes.io/instance: \"cluster-autoscaler\"\n      app.kubernetes.io/name:
  \"aws-cluster-autoscaler\"\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/instance:
  \"cluster-autoscaler\"\n        app.kubernetes.io/name: \"aws-cluster-autoscaler\"\n
  \   spec:\n      dnsPolicy: \"ClusterFirst\"\n      containers:\n        - name:
  aws-cluster-autoscaler\n          image: \"us.gcr.io/k8s-artifacts-prod/autoscaling/cluster-autoscaler:v1.18.1\"\n
  \         imagePullPolicy: \"IfNotPresent\"\n          command:\n            - ./cluster-autoscaler\n
  \           - --cloud-provider=aws\n            - --namespace=kube-system\n            -
  --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/eks-apne1-prod-terraform-eks-demo-infra\n
  \           - --logtostderr=true\n            - --stderrthreshold=info\n            -
  --v=4\n          env:\n            - name: AWS_REGION\n              value: \"ap-northeast-1\"\n
  \         livenessProbe:\n            httpGet:\n              path: /health-check\n
  \             port: 8085\n          ports:\n            - containerPort: 8085\n
  \         resources:\n            {}\n      serviceAccountName: cluster-autoscaler-aws-cluster-autoscaler\n
  \     tolerations:\n        []\n"
name: cluster-autoscaler
namespace: kube-system
version: 1
