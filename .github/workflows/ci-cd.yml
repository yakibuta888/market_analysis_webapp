name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - main  # mainブランチにプッシュされたときに実行

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_database
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Check Out Repo
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:latest
          ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        build-args: |
          USERNAME=${{ secrets.USER_NAME }}
          USERID=${{ secrets.USER_ID }}
          GROUPID=${{ secrets.GROUP_ID }}
          HOMEDIR=${{ secrets.HOME_DIR }}
          WORKDIR=${{ secrets.WORK_DIR }}

    - name: Verify Published Image
      run: |
        docker pull ghcr.io/${{ github.repository }}/backend:latest
        docker image inspect ghcr.io/${{ github.repository }}/backend:latest
        echo "The Docker image has been pushed to GHCR successfully."

    - name: Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}/backend:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Wait for MySQL
      run: |
        until nc -z -v -w30 127.0.0.1 3306
        do
          echo "Waiting for MySQL..."
          sleep 1
        done
        echo "MySQL is up and running!"

    - name: Run tests
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_USER: root
        MYSQL_PASSWORD: root
        MYSQL_DATABASE: test_database
        DIALECT: mysql
        DRIVER: pymysql
        MYSQL_PORT: 3306
        PYTHONPATH: ${{ github.workspace }}/backend
      run: pytest
      working-directory: ./backend

    - name: Set up Kubeconfig
      uses: azure/setup-kubectl@v1

    - name: Setup SSH connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Create Kubernetes Secret via SSH if not exists
      run: |
        SECRET_NAME=ghcr-credentials
        NAMESPACE=default

        # 指定したシークレットが存在するか確認
        if ! ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "${{ secrets.KUBECTL_PATH }} get secret \"$SECRET_NAME\" --namespace \"$NAMESPACE\" &> /dev/null"; then

          echo "シークレット '$SECRET_NAME' が存在しません。作成します。"

          # シークレットが存在しない場合に作成
          ssh -p ${{ secrets.SSH_PORT }} -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
          ${{ secrets.KUBECTL_PATH }} create secret docker-registry "$SECRET_NAME" \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.DOCKER_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_PASSWORD }} \
            --docker-email="${{ secrets.DOCKER_EMAIL }}" \
            --namespace="$NAMESPACE"
          EOF
        else
          echo "シークレット '$SECRET_NAME' は既に存在します。"
        fi
      shell: bash

    - name: Install kubeval
      run: |
        curl -sL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xvz
        sudo mv kubeval /usr/local/bin

    - name: Validate Kubernetes YAML files
      run: |
        find k8s -name '*.yaml' -print -exec kubeval --strict --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/ {} \;
